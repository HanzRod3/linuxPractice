#!/usr/bin/env bash
# userdoc.sh — manage a small user “database” (JSON) and a generated USERS.md
# Usage examples:
#   scripts/userdoc.sh init
#   scripts/userdoc.sh add --username alice --fullname "Alice Adams" --role "Dev" --groups "sudo,devs" --shell /bin/bash --github hanZrod3 --notes "Backend trainee"
#   scripts/userdoc.sh list
#   scripts/userdoc.sh md
#   scripts/userdoc.sh sync-linux --dry-run
#
# Safe by default: it NEVER touches system users unless you run `sync-linux`.
# `sync-linux` requires sudo and will create/update Linux users based on the JSON.

set -euo pipefail

DB="userdoc/users.json"
OUT_MD="USERS.md"

have() { command -v "$1" >/dev/null 2>&1; }
err() { echo "ERROR: $*" >&2; }
info() { echo "[info] $*"; }

require_tools() {
  for c in jq; do
    if ! have "$c"; then err "Missing required tool: $c"; exit 1; fi
  done
}

init_db() {
  if [[ -f "$DB" ]]; then
    info "Database already exists at $DB"
    return
  fi
  mkdir -p "$(dirname "$DB")"
  cat > "$DB" <<'JSON'
{
  "users": []
}
JSON
  info "Initialized $DB"
}

add_user() {
  require_tools
  local username="" fullname="" role="" groups="" shell="/bin/bash" github="" notes=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --username) username="$2"; shift 2;;
      --fullname) fullname="$2"; shift 2;;
      --role)     role="$2"; shift 2;;
      --groups)   groups="$2"; shift 2;;
      --shell)    shell="$2"; shift 2;;
      --github)   github="$2"; shift 2;;
      --notes)    notes="$2"; shift 2;;
      *) err "Unknown arg: $1"; exit 1;;
    esac
  done
  if [[ -z "$username" || -z "$fullname" ]]; then
    err "Required: --username and --fullname"
    exit 1
  fi
  if [[ ! -f "$DB" ]]; then init_db; fi

  # Prevent duplicates
  if jq -e --arg u "$username" '.users[] | select(.username==$u)' "$DB" >/dev/null; then
    err "User '$username' already exists in DB"
    exit 1
  fi

  # Append record
  tmp="$(mktemp)"
  jq --arg username "$username" \
     --arg fullname "$fullname" \
     --arg role     "$role" \
     --arg groups   "$groups" \
     --arg shell    "$shell" \
     --arg github   "$github" \
     --arg notes    "$notes" \
     '.users += [{username:$username,fullname:$fullname,role:$role,groups:$groups,shell:$shell,github:$github,notes:$notes}]' \
     "$DB" > "$tmp"
  mv "$tmp" "$DB"
  info "Added '$username' to $DB"
}

list_users() {
  require_tools
  if [[ ! -f "$DB" ]]; then err "No DB found. Run: scripts/userdoc.sh init"; exit 1; fi
  jq -r '.users[] | "\(.username)\t|\t\(.fullname)\t|\t\(.role)\t|\t\(.groups)\t|\t\(.shell)\t|\t\(.github)"' "$DB" \
    | sed '1i username\t|\tfullname\t|\trole\t|\tgroups\t|\tshell\t|\tgithub'
}

generate_md() {
  require_tools
  if [[ ! -f "$DB" ]]; then err "No DB found. Run: scripts/userdoc.sh init"; exit 1; fi

  local repo=""
  if git rev-parse --show-toplevel >/dev/null 2>&1; then
    repo="$(basename "$(git rev-parse --show-toplevel)")"
  fi

  {
    echo "# Project Users"
    echo
    echo "_Auto-generated by \`scripts/userdoc.sh md\` on $(date -Is)._"
    [[ -n "$repo" ]] && echo "Repo: \`$repo\`"
    echo
    echo "| Username | Full name | Role | Groups | Shell | GitHub | Notes |"
    echo "|---|---|---|---|---|---|---|"
    jq -r '.users[] |
      "| \(.username) | \(.fullname) | \(.role // "") | \(.groups // "") | \(.shell // "") | " +
      (if .github and (.github|length>0) then "@\(.github)" else "" end) + " | " + (.notes // "") + " |"
    ' "$DB"
    echo
    echo "## How this works"
    echo "- This table is generated from \`$DB\`."
    echo "- Edit via CLI: \`scripts/userdoc.sh add --username …\` or open the JSON and run \`scripts/userdoc.sh md\` again."
  } > "$OUT_MD"

  info "Wrote $OUT_MD"
}

sync_linux() {
  # create/update real Linux users based on DB (opt-in; requires sudo)
  # default DRY RUN; pass --apply to actually make changes
  require_tools
  local apply="no"
  if [[ "${1-}" == "--apply" ]]; then apply="yes"; fi
  if [[ ! -f "$DB" ]]; then err "No DB found. Run: scripts/userdoc.sh init"; exit 1; fi

  jq -c '.users[]' "$DB" | while read -r row; do
    username="$(jq -r '.username' <<<"$row")"
    shell="$(jq -r '.shell // "/bin/bash"' <<<"$row")"
    groups="$(jq -r '.groups // ""' <<<"$row" | tr -d ' ')"

    if id "$username" >/dev/null 2>&1; then
      echo "[plan] user exists: $username -> ensure shell=$shell groups=$groups"
      if [[ "$apply" == "yes" ]]; then
        sudo usermod -s "$shell" "$username"
        [[ -n "$groups" ]] && sudo usermod -aG "$groups" "$username"
      fi
    else
      echo "[plan] create user: $username (shell=$shell groups=$groups)"
      if [[ "$apply" == "yes" ]]; then
        sudo useradd -m -s "$shell" "$username"
        [[ -n "$groups" ]] && sudo usermod -aG "$groups" "$username"
        echo "[note] set a password manually: sudo passwd $username"
      fi
    fi
  done

  if [[ "$apply" == "no" ]]; then
    echo "[dry-run] No changes made. To apply: scripts/userdoc.sh sync-linux --apply"
  fi
}

case "${1-}" in
  init)         init_db ;;
  add)          shift; add_user "$@" ;;
  list)         list_users ;;
  md)           generate_md ;;
  sync-linux)   shift || true; sync_linux "${1-}" ;;
  *)
    cat <<USAGE
Usage:
  scripts/userdoc.sh init
  scripts/userdoc.sh add --username <name> --fullname "<Full Name>" [--role "<Role>"] [--groups "g1,g2"] [--shell /bin/bash] [--github handle] [--notes "<text>"]
  scripts/userdoc.sh list
  scripts/userdoc.sh md
  scripts/userdoc.sh sync-linux [--apply]

Tips:
  - Start with 'init', then 'add' a few users, then 'md' to generate USERS.md
  - 'sync-linux' (optional) will create/update system users to match the DB (use --apply to actually do it)
USAGE
    ;;
esac

